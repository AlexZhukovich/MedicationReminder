version: 2

references:

  ## Cache

  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace

  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
#  attach_release_workspace: &attach_release_workspace
#    attach_workspace:
#      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
#  persist_release_workspace: &persist_release_workspace
#    persist_to_workspace:
#      root: *workspace
#      paths:
#        - mobile/build
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  # Docker images
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx1800m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1800m"'
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  # Google Cloud Service

  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json


  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

jobs:

  # Build debug APK and instrumented test APK
  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew :app:assembleDebug :app:assembleDebugAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/


  # Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project medicationreminder-7179d
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account firebase-adminsdk-2u66p@medicationreminder-7179d.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --device model=Nexus5X,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard/ --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-yw8tb0h3910k6-mx6isf1za1zds | tail -1`*" /root/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase coverage report
          command: mkdir -p app/build/outputs/code-coverage/connected && cp firebase/Nexus5X-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true :app:jacocoTestReport
#      - run:
#          name: Upload coverage report to Codacy
#          command: ./gradlew -PciBuild=true uploadCoverageToCodacy
      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/


workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
      - test_unit
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented



#version: 2
#jobs:
#  build:
#    docker:
#      # specify the version you desire here
#      - image: circleci/android:api-27-alpha
#
#    environment:
#      # Customize the JVM maximum heap limit
#      _JAVA_OPTIONS: "-Xmx1400m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2"
#      JVM_OPTS: -Xmx3200m
#      TERM: dumb
#
#    steps:
#      - checkout
#
#      # Download and cache dependencies
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#
#      - run:
#          name: update android sdk
#          command: |
#              echo y | android update sdk --no-ui --all --filter tool,extra-android-m2repository,extra-google-google_play_services,extra-google-m2repository,android-26
#              echo y | android update sdk --no-ui --all --filter build-tools-26.0.2
#
#      - run:
#          name: Setup emulator
#          command: sdkmanager "system-images;android-24;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
#
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
#          background: true
#
#      - run:
#          name: chmod permissions
#          command: chmod +x ./gradlew
#
#      - run:
#          name: gradle dependencies
#          command: ./gradlew androidDependencies
#
#      - save_cache:
#          paths: ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#
#      # run unit tests!
#      - run:
#          name: build
#          command: |
#              ./gradlew build
##              ./gradlew lint test
##      - run:
##          name: Show list of system-images
##          command: sdkmanager --list --verbose | grep system-images
#
##      - run:
##          name: Setup Emulator
##          command: sdkmanager "system-images;android-24;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
##
##      - run:
##          name: Launch Emulator
##          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
##          background: true
##
#      - run:
#          name: Wait emulator
#          command: |
#              circle-android wait-for-boot
##
#
#      - run:
#          name: Turn off the WINDOW ANIMATION SCALE
#          command: adb shell settings put global window_animation_scale 0
#      - run:
#          name: Turn off the TRANSITION ANIMATION SCALE
#          command: adb shell settings put global transition_animation_scale 0
#      - run:
#          name: Turn off the ANIMATOR DURATION SCALE
#          command: adb shell settings put global animator_duration_scale 0
#
#      - run:
#          name: Unlock the emulator
#          command:
#              adb shell input keyevent 82
#
##      - run:
##          name: Turn off the animations
##          command: |
##              adb shell settings put global window_animation_scale 0
##              adb shell settings put global transition_animation_scale 0
##              adb shell settings put global animator_duration_scale 0
##
##      - run:
##          name: Wait emulator
##          command: |
##              circle-android wait-for-boot
##              adb shell input keyevent 82
##              adb shell svc power stayon true
##
##
#      - run:
#          name: Run UI test
#          command: ./gradlew build connectedAndroidTest
#
#      - store_test_results:
#          path: app/build/test-results
#
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
##
###version: 2
###jobs:
###  build:
###    working_directory: ~/workspace
###    docker:
###      #- image: circleci/android:api-27-alpha
###      - image: bitriseio/docker-android:v2017_12_16-07_48-b914
###    environment:
###          TERM: dumb
###          _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
###          GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
###    steps:
###      -  run:
###          name: Lists installed targets
###          command: android list target
###      - run:
###          name: List available targets and other sdk modules
###          command: sdkmanager --list --include_obsolete --verbose
###      - run:
###          name: Create avd
###          command: echo no | avdmanager create avd -n testEmulator -k "system-images;android-24;default;armeabi-v7a"
###      - run:
###          name: Start emulator
###          command: /opt/android-sdk-linux/emulator/emulator -avd testEmulator -no-audio -no-window
###          background: true
###      - checkout
###      - run:
###          name: chmod permissions
###          command: chmod +x ./gradlew
###      - run:
###          name: Download Dependencies
###          command: ./gradlew androidDependencies
###      - run:
###          name: Assemble the app
###          command: ./gradlew :app:assemble
###      - run:
###          name: Run Local tests
###          command: ./gradlew test
####      - save_cache:
####          paths:
####            - ~/.gradle
####          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
####      - run:
####          name: Wait for device
####          command: circle-android wait-for-boot
###      - run:
###          name: chmod permissions
###          command: chmod +x ./android-wait-for-boot.sh
###      - run:
###          name: Wait for emulator
###          command: ./android-wait-for-boot.sh
####      - run:
####          name: Run Local Tests
####          command: ./gradlew lint test
####      - run:
####          name: Wait for device
####          command: circle-android wait-for-boot
###      - run:
###          name: Unlock the device
###          command: adb shell input keyevent 82
####      - run:
####          name: Plug in the device
####          command: adb shell svc power stayon true
###      - run:
###          name: Turn off the WINDOW ANIMATION SCALE
###          command: adb shell settings put global window_animation_scale 0
###      - run:
###          name: Turn off the TRANSITION ANIMATION SCALE
###          command: adb shell settings put global transition_animation_scale 0
###      - run:
###          name: Turn off the ANIMATOR DURATION SCALE
###          command: adb shell settings put global animator_duration_scale 0
###      - run:
###          name: Run Instrumentation Tests
###          command: ./gradlew :app:connectedAndroidTest
###      - run:
###          name: Run Lint
###          command: ./gradlew lint
###      - run:
###          name: Detekt Check
###          command: ./gradlew detektCheck
###      - run:
###          name: codecov report
###          command: bash <(curl -s https://codecov.io/bash)
###      - store_artifacts:
###          path: app/build/reports
###          destination: reports
###      - store_test_results:
###          path: app/build/test-results