apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

jacoco {
    toolVersion '0.7.9'
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.alexzh.medicationreminder"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues     = true
        }
    }
    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }
}

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    group       = 'Reporting'
    description = 'Generate JaCoCo coverage reports'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*_Impl*.*',
                      '**/*Test*.*',
                      'android/**/*.*']

    def debugJavaTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def debugKotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugJavaTree, debugKotlinTree])
    executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                           "${buildDir}/outputs/code-coverage/connected/coverage.ec"])
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Android Support Libraries
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.android.support:recyclerview-v7:$support_library_version"
    implementation "com.android.support:preference-v14:$support_library_version"

    // Constraint layout
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"

    // RxJava and RxAndroid
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // Android Architecture Core
    androidTestImplementation "android.arch.core:core-testing:$architecture_comp_version"

    // Room
    implementation "android.arch.persistence.room:runtime:$architecture_comp_version"
    kapt "android.arch.persistence.room:compiler:$architecture_comp_version"
    testImplementation "android.arch.persistence.room:testing:$architecture_comp_version"
    implementation "android.arch.persistence.room:rxjava2:$architecture_comp_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // JUnit
    testImplementation "junit:junit:$junit_version"

    // Robolectric
    testImplementation "org.robolectric:robolectric:$robolectric_version"

    // Mockito
    androidTestImplementation "org.mockito:mockito-android:$mockito_android_version"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version"
    androidTestImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version"

    // Test Runner
    androidTestImplementation "com.android.support.test:runner:$test_runner"

    // Espresso
    androidTestImplementation ("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'recyclerview-v7'
    })
    androidTestImplementation ("com.android.support.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'recyclerview-v7'
    })
    androidTestImplementation ("com.android.support.test.espresso:espresso-intents:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'recyclerview-v7'
    })

    // UiAutomator
    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:$uiautomator_version"
}
